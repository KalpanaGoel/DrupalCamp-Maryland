<?php

/**
 * @file
 * Provides integration with the Aloha Editor WYSIWYG editor.
 */

/**
 * @todo Improve Aloha Editor build for Drupal.
 * @see http://drupal.org/node/1782348
 */

// @todo Establish a versioning scheme for our custom build.
const ALOHA_VERSION = 'custom build: 0.22.2+dev at f9b2a7679abc913e4ccf16ce4bccacd8c998b592';

/**
 * Implements hook_menu().
 */
function aloha_menu() {
  $items['aloha/repository/link/%'] = array(
    'page callback' => 'aloha_repository_link',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );
  $items['aloha/repository/image/%'] = array(
    'page callback' => 'aloha_repository_image',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );
  return $items;
}

/**
 * Implements hook_library().
 */
function aloha_library() {
  $module_path = drupal_get_path('module', 'aloha');
  // Location of Aloha Editor build we're using and the main JS file within it.
  $library_path = $module_path . '/build/alohaeditor';
  $library_file = "aloha.js";

  $libraries['aloha-for-textareas'] = array(
    'title' => 'Drupal behavior to enable Aloha Editor WYSIWYG editing on textareas.',
    'version' => VERSION,
    'js' => array(
      $module_path . '/js/drupal.aloha.textarea.js' => array(),
      array(
        'type' => 'setting',
        'data' => array('aloha' => array('settings' => array(
          // Allow other modules, e.g. the Edit module, to embed the rendered
          // toolbar within their own DOM infrastructure.
          'DrupalUI' => array(
            'renderOwnToolbarContainer' => TRUE,
          ),
        ))),
      ),
    ),
    'dependencies' => array(
      array('aloha', 'aloha'),
    )
  );

  $libraries['aloha.edit'] = array(
    'title' => 'Integrate Aloha Editor with the Edit module.',
    'version' => ALOHA_VERSION,
    'js' => array(
      $module_path . '/js/drupal.aloha.edit.js' => array(),
      // Configure Edit's JS to use aloha as the WYSIWYG.
      array(
        'data' => array(
          'edit' => array('wysiwyg' => 'aloha'),
          'aloha' => array('settings' => array(
            // Ensure the Edit module can embed the rendered toolbar within
            // its own DOM infrastructure.
            'DrupalUI' => array(
              'renderOwnToolbarContainer' => FALSE,
            )
          ))
        ),
        'type' => 'setting',
      ),
    ),
    'css' => array(
      $module_path . '/css/drupal.aloha.edit.css',
    ),
    'dependencies' => array(
      array('aloha', 'aloha'),
    )
  );

  // Modules that want to add Aloha Editor plug-ins to the list of plug-ins to
  // be loaded should hook_library_alter() this library and inject their own
  // dependencies.
  // Look at Drupal.settings.aloha.settings.plugins.load (this is identical to
  // Aloha.settings.plugins) to see the fullly expanded list of Aloha Editor
  // plug-ins that will be loaded.
  $libraries['aloha'] = array(
    'title' => 'Pseudo-library that depends on the core of Aloha Editor and contains a list of all Aloha Editor plug-ins that should be loaded.',
    'version' => ALOHA_VERSION,
    'dependencies' => array(
      // The Aloha Editor core.
      array('aloha', 'aloha.core'),
      // Our custom UI.
      array('aloha', 'aloha.drupal/drupal-ui'),
      // A sensible list of default plug-ins.
      array('aloha', 'aloha.common/contenthandler'),
      array('aloha', 'aloha.common/format'),
      array('aloha', 'aloha.common/align'),
      array('aloha', 'aloha.common/list'),
      array('aloha', 'aloha.common/link'),
      array('aloha', 'aloha.common/paste'),
      array('aloha', 'aloha.common/image'),
      // Tight Drupal integration.
      array('aloha', 'aloha.drupal/drupal'),
    ),
  );

  $libraries['aloha.core'] = array(
    'title' => 'Aloha Editor',
    'website' => 'http://aloha-editor.org/',
    'version' => ALOHA_VERSION,
    'js' => array(
      // First, load require.js. It must be loaded *before* jQuery, because only
      // then, jQuery will define itself as a require.js module.
      $library_path . '/lib/require.js' => array(
        'data' => $library_path . '/lib/require.js',
        'type' => 'file',
        'scope' => 'header',
        'group' => JS_LIBRARY,
        'every_page' => TRUE,
        'weight' => -21, // jquery.js has weight -20
        'preprocess' => TRUE,
        'cache' => TRUE,
        'defer' => FALSE,
      ),
      // Load the aggregated Aloha JS file.
      $library_path . '/lib/' . $library_file => array(
        'group' => JS_LIBRARY,
        'weight' => -999,
        'defer' => FALSE,
        'preprocess' => FALSE,
      ),
      $module_path . '/js/drupal.aloha.js' => array(
        'group' => JS_LIBRARY,
        'defer' => FALSE,
      ),
      // Aloha Editor core settings.
      array(
        'type' => 'setting',
        'data' => array('aloha' => array('settings' => array(
          'baseUrl' => file_create_url($library_path . '/lib'),
          // Reduce delays for the "aloha-smart-content-changed" events to a
          // minimum.
          'smartContentChange' => array(
            'idle'  => 200,
            'delay' => 100,
          ),
        ))),
      ),
    ),
    'dependencies' => array(
      array('aloha', 'aloha.common/commands'),
      array('system', 'jquery'),
    )
  );

  // Aloha Editor: "common" bundle of plug-ins (shipped with Aloha Editor).
  $libraries['aloha.common/ui'] = array(
    'title' => 'Aloha Editor plug-in: UI.',
    'version' => ALOHA_VERSION,
    'js' => array(
      array(
        'type' => 'setting',
        'data' => array('aloha' => array('settings' => array(
          'plugins' => array('load' => array('common/ui')),
          // We don't want to use Aloha Editor's sidebar in Drupal.
          'sidebar' => array('disabled' => TRUE),
        ))),
      ),
    ),
  );
  $libraries['aloha.common/commands'] = array(
    'title' => 'Aloha Editor plug-in: commands.',
    'version' => ALOHA_VERSION,
    'js' => array(
      array(
        'type' => 'setting',
        'data' => array('aloha' => array('settings' => array(
          'plugins' => array('load' => array('common/commands')),
        ))),
      ),
    ),
  );
  $libraries['aloha.common/format'] = array(
    'title' => 'Aloha Editor plug-in: formatting.',
    'version' => ALOHA_VERSION,
    'js' => array(
      array(
        'type' => 'setting',
        'data' => array('aloha' => array('settings' => array(
          'plugins' => array(
            'load' => array('common/format'),
            // Note: the DrupalContentHandler plug-in will ensure that only tags
            // specified in the editable's data-edit-allowed-tags attribute will
            // be allowed. Here, we must specify the whole range of available
            // HTML tags.
            'format' => array('config' => array(
              // Inline HTML elements.
              'strong', 'em', 'b', 'i', 'u', 's', 'sub', 'sup',
              // Block-level HTML elements.
              'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'pre',
              // Non-HTML.
              'removeFormat',
            )),
          ),
        ))),
    ),
    ),
  );
  $libraries['aloha.common/align'] = array(
    'title' => 'Aloha Editor plug-in: alignment.',
    'version' => ALOHA_VERSION,
    'js' => array(
      array(
        'type' => 'setting',
        'data' => array('aloha' => array('settings' => array(
          'plugins' => array('load' => array('common/align')),
        ))),
      ),
    ),
    'css' => array(
      $library_path . '/plugins/common/align/css/align.css',
    ),
  );
  $libraries['aloha.common/list'] = array(
    'title' => 'Aloha Editor plug-in: common/list',
    'version' => ALOHA_VERSION,
    'js' => array(
      array(
        'type' => 'setting',
        'data' => array('aloha' => array('settings' => array(
          'plugins' => array(
            'load' => array('common/list'),
            'list' => array('config' => array('ul', 'ol')),
          ),
        ))),
      ),
    ),
  );
  $libraries['aloha.common/contenthandler'] = array(
    'title' => 'Aloha Editor plug-in: contenthandler.',
    'version' => ALOHA_VERSION,
    'js' => array(
      array(
        'type' => 'setting',
        'data' => array('aloha' => array('settings' => array(
          'plugins' => array('load' => array('common/contenthandler')),
        ))),
      ),
    ),
  );
  $libraries['aloha.common/characterpicker'] = array(
    'title' => 'Aloha Editor plug-in: characterpicker.',
    'version' => ALOHA_VERSION,
    'js' => array(
      array(
        'type' => 'setting',
        'data' => array('aloha' => array('settings' => array(
          'plugins' => array('load' => array('common/characterpicker')),
        ))),
      ),
    ),
    'css' => array(
      $library_path . '/plugins/common/characterpicker/css/characterpicker.css',
    ),
  );
  $libraries['aloha.common/paste'] = array(
    'title' => 'Aloha Editor plug-in: paste.',
    'version' => ALOHA_VERSION,
    'js' => array(
      array(
        'type' => 'setting',
        'data' => array('aloha' => array('settings' => array(
          'plugins' => array('load' => array('common/paste')),
        ))),
      ),
    ),
  );
  $libraries['aloha.common/block'] = array(
    'title' => 'Aloha Editor plug-in: Aloha Blocks.',
    'version' => ALOHA_VERSION,
    'js' => array(
      array(
        'type' => 'setting',
        'data' => array('aloha' => array('settings' => array(
          'plugins' => array('load' => array('common/block')),
        ))),
      ),
    ),
    'css' => array(
      $library_path . '/plugins/common/block/css/block.css',
    ),
  );
  $libraries['aloha.common/link'] = array(
    'title' => 'Aloha Editor plug-in: link.',
    'version' => ALOHA_VERSION,
    'js' => array(
      array(
        'type' => 'setting',
        'data' => array('aloha' => array('settings' => array(
          'plugins' => array(
            'load' => array('common/link'),
            'link' => array(
              'objectTypeFilter' => array('website'),
            )),
        ))),
      ),
    ),
    'css' => array(
      $library_path . '/plugins/common/link/css/link.css',
    ),
  );
  $libraries['aloha.common/image'] = array(
    'title' => 'Aloha Editor plug-in: image.',
    'version' => ALOHA_VERSION,
    'js' => array(
      array(
        'type' => 'setting',
        'data' => array('aloha' => array(
          'settings' => array(
            'toolbar' => array(
              // Disable all visual UI elements of the image plugin except for a few.
              'exclude' => array(
                'imageResizeWidth', 'imageResizeHeight',
                'imageAlignLeft', 'imageAlignRight', 'imageAlignNone',
                'imageCropButton', 'imageCnrReset', 'imageCnrRatio',
                'imageDecPadding', 'imageIncPadding'
              )
            ),
            'plugins' => array(
              'load' => array('common/image'),
              'image' => array(
                'objectTypeFilter' => array('image'),
                'fixedAspectRatio' => TRUE,
                'ui' => array(
                  'meta' => TRUE,
                  'crop' => FALSE,
                  'resizable' => FALSE,
                ),
              ),
            ),
          ),
        )),
      )
    ),
  );

  // Aloha Editor: "drupal" bundle of plug-ins (shipped with this module).
  $libraries['aloha.drupal'] = array(
    'title' => 'Register the "drupal" bundle, this is the bundle that ships with this module, the "Aloha" module.',
    'version' => VERSION,
    'js' => array(
      array(
        'type' => 'setting',
        'data' => array('aloha' => array('settings' => array(
          'bundles' => array('drupal' => file_create_url($module_path . '/aloha/'))
        ))),
      ),
    ),
  );
  $libraries['aloha.drupal/drupal'] = array(
    'title' => '"Drupal" Aloha Editor plug-in: contenthandler + link repository',
    'version' => VERSION,
    'js' => array(
      array(
        'type' => 'setting',
        'data' => array('aloha' => array('settings' => array(
          'plugins' => array('load' => array('drupal/drupal')),
          'drupal' => array(
            'repository' => array(
              'drupal-links' => array(
                'type' => 'website',
                'name' => t('Internal links'),
                'url' => url('aloha/repository/link/')
              ),
              'drupal-images' => array(
                'type' => 'image',
                'name' => t('Local images'),
                'url' => url('aloha/repository/image/'),
              ),
            ),
          ),
          'contentHandler' => array(
            'insertHtml' => array('word', 'generic', 'drupal'),
            'handler' => array(
              'generic' => array('transformFormattings' => FALSE),
            ),
            'initEditable' => array(),
          ),
        ))),
      ),
    ),
    'dependencies' => array(
      // Ensure the "aloha" bundle is registered.
      array('aloha', 'aloha.drupal'),
      // This plug-in ships with a custom content handler.
      array('aloha', 'aloha.common/contenthandler'),
    )
  );
  $ui_path = $module_path . '/aloha/drupal-ui/lib';
  $libraries['aloha.drupal/drupal-ui'] = array(
    'title' => 'Drupal-specific UI for Aloha Editor.',
    'version' => VERSION,
    'js' => array(
      array(
        'type' => 'setting',
        'data' => array('aloha' => array('settings' => array(
          // Overide parts of AE's default UI, so that we can have a custom UI
          // with minimal effort. Essentially, we're reconfiguring require.js
          // here.
          'requireConfig' => array(
            'paths' => array(
              'ui/multiSplit' => file_create_url($ui_path . '/multiSplit'),
              'ui/utils'      => file_create_url($ui_path . '/utils'),
              'ui/toolbar'    => file_create_url($ui_path . '/toolbar'),
              'ui/tab'        => file_create_url($ui_path . '/tab'),
              'ui/menuButton' => file_create_url($ui_path . '/menuButton'),
            ),
          ),
        ))),
      ),
    ),
    'css' => array(
      $module_path . '/css/aloha-drupal-ui.css' => array(
        'weight' => 50,
      ),
    ),
    'dependencies' => array(
      // Ensure the "drupal" bundle is registered.
      array('aloha', 'aloha.drupal'),
      // We're overriding the default UI, so depend on that default UI.
      array('aloha', 'aloha.common/ui'),
      // Icons for the UI.
      array('admin_icons', 'spark_icons'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_element_info_alter().
 */
function aloha_element_info_alter(&$types) {
  $types['text_format']['#pre_render'][] = 'aloha_pre_render_text_format';
}

/**
 * Render API callback: processes a text format widget to load and attach Aloha
 * Editor.
 *
 * Uses the element's #id as reference to attach Aloha Editor.
 */
function aloha_pre_render_text_format($element) {
  // filter_process_format() copies properties to the expanded 'value' child
  // element. Skip this text format widget, if it contains no 'format' or when
  // the current user does not have access to edit the value.
  if (!isset($element['format']) || !empty($element['value']['#disabled'])) {
    return $element;
  }
  // Allow modules to programmatically enforce no client-side editor by setting
  // the #wysiwyg property to FALSE.
  if (isset($element['#wysiwyg']) && !$element['#wysiwyg']) {
    return $element;
  }

  $format_field = &$element['format'];
  $field = &$element['value'];

  // Use a hidden element for a single text format.
  if (!$format_field['format']['#access']) {
    $format_field['aloha'] = array(
      '#type' => 'hidden',
      '#name' => $format_field['format']['#name'],
      '#value' => $field['#format'],
      '#attributes' => array(
        'id' => $format_field['format']['#id'],
        'class' => array('aloha-formatselector-for-textarea'),
      ),
      '#attached' => array(
        'library' => array(
          array('aloha', 'aloha-for-textareas'),
        ),
        'js' => array(
          array(
            'type' => 'setting',
            'data' => array('aloha' => array('textareas' => array(
              $format_field['format']['#id'] => $field['#id'],
            ))),
          ),
        ),
        'aloha_add_format_settings' => array(
          array()
        ),
      ),
    );
  }
  // Otherwise, attach to text format selector.
  else {
    $format_field['format']['#attributes']['class'][] = 'aloha-formatselector-for-textarea';
    $format_field['format']['#attached']['library'][] = array('aloha', 'aloha-for-textareas');
    $format_field['format']['#attached']['js'][] = array(
      'type' => 'setting',
      'data' => array('aloha' => array('textareas' => array(
        $format_field['format']['#id'] => $field['#id'],
      ))),
    );
    $format_field['format']['#attached']['aloha_add_format_settings'][] = array();
  }

  return $element;
}

/**
 * Adds Drupal.settings.aloha.formats and Aloha.settings.plugins.drupal. Ensures
 * Aloha Editor has the metadata to deal with formats.
 */
function aloha_add_format_settings() {
  $format_settings_added = &drupal_static(__FUNCTION__, FALSE);

  if (!$format_settings_added) {
    global $user;
    $formats = filter_formats($user);

    $settings['formats'] = array();
    $settings['settings']['plugins']['drupal'] = array();

    // Gather all necessary metadata for each format available to the current
    // user.
    // @todo filter_get_filter_types_by_format() and filter_get_allowed_tags_by_format()
    // are provided by http://drupal.org/node/1782838
    foreach (array_keys($formats) as $format_id) {
      $filter_types = filter_get_filter_types_by_format($format_id);
      $allowed_tags = filter_get_allowed_tags_by_format($format_id);
      $no_disallowed_tags = $allowed_tags === TRUE;
      $necessary_tags_allowed = $no_disallowed_tags || (in_array('br', $allowed_tags) && in_array('p', $allowed_tags));
      $class = 'text-format-' . drupal_html_class($format_id);
      $settings['formats'][$format_id] = array(
        'id' => $format_id,
        // Aloha Editor should only be enabled if no "HTML generator" filters
        // are used in this format, and the <br> and <p> tags are allowed.
        'status' => !in_array(FILTER_TYPE_HTML_GENERATOR, $filter_types)
        && $necessary_tags_allowed,
        // The class that will be set on the editable whenever this text format
        // is active.
        'className' => $class,
      );

      // For Aloha Editor to make sense in a Drupal context, we need to make
      // sure that Aloha Editor works as well as possible with Drupal's filter
      // system. Hence we developed the 'drupal' plug-in for Aloha Editor, which
      // is able to adjust the UI and filter pasting based on the allowed tags
      // of the current text format of the current editable.
      // Whenever we use Aloha Editor within Drupal, it's in
      // e.g. if the <em> tag is disallowed, it won't show the "I" button and
      // pasted italic text will automatically be unitalicized.
      // @todo: make this plug-in obsolete: http://drupal.org/node/1806492
      if ($settings['formats'][$format_id]['status']) {
        $settings['settings']['plugins']['drupal']['editables'][".$class"] = array(
          'allowedTags' => $no_disallowed_tags ? array() : $allowed_tags,
        );
      }
    }

    drupal_add_js(array('aloha' => $settings), array('type' => 'setting'));

    $format_settings_added = TRUE;
  }
}

/**
 * Implements hook_process_html().
 *
 * A temporary work-around to avoid needing a core patch. Aloha currently
 * requires a custom attribute on its script tag.
 *
 * @see http://drupal.org/node/1664602
 */
function aloha_process_html(&$variables) {
  if (strpos($variables['scripts'], '/lib/aloha.js') !== FALSE) {
    $variables['scripts'] = preg_replace('/(\/lib\/aloha\.js[^"]*["])/', '$1 data-aloha-defer-init="true"', $variables['scripts'], 1);
  }
}
