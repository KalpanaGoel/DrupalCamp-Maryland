<?php

/**
* Tests the functionality of the Acquia Agent module.
*/
class AcquiaAgentTestCase extends DrupalWebTestCase {
  protected $privileged_user;
  protected $setup_path;
  protected $credentials_path;
  protected $settings_path;
  protected $help_path;
  protected $cloud_services_url;
  protected $trial_url;
  protected $acquia_test_id;
  protected $acquia_test_key;

  public static function getInfo() {
    // Note: getInfo() strings are not translated with t().
    return array(
      'name' => 'Acquia Agent UI & Connection',
      'description' => 'Test Acquia Agent UI and connecting to the Acquia Network.',
      'group' => 'Acquia',
    );
  }

  public function setUp() {
    global $base_url;
    // Enable any modules required for the test
    parent::setUp('acquia_agent', 'acquia_connector_test');
    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser(array(
      'administer site configuration',
      'access administration pages',
    ));
    $this->drupalLogin($this->privileged_user);
    // Create a user that has a Network subscription.
    $this->network_user = $this->drupalCreateUser();
    user_save($this->network_user, array('mail' => ACQTEST_EMAIL, 'pass' => ACQTEST_PASS));
    // Setup variables.
    $this->setup_path = 'admin/config/system/acquia-agent/setup';
    $this->credentials_path = 'admin/config/system/acquia-agent/credentials';
    $this->settings_path = 'admin/config/system/acquia-agent';
    $this->help_path = 'admin/help/acquia_agent';
    $this->cloud_services_url = 'http://www.acquia.com/products-services/acquia-network/cloud-services';
    $this->trial_url = 'https://www.acquia.com/trial';
    $this->status_report_url = 'admin/reports/status';
    variable_set('acquia_network_address', $base_url);
    variable_set('acquia_spi_server', $base_url);
    variable_set('acquia_spi_ssl_override', TRUE);
    variable_set('acquia_agent_verify_peer', FALSE);
  }

  /**
   * Helper function for storing UI strings.
   */
  private function acquiaAgentStrings($id) {
    switch ($id) {
      case '30-day':
        return 'Get a free 30-day trial of the Acquia Network which includes a library of expert knowledge, tools and services to make your site awesome, and Drupal support when you need it.';
      case 'get-connected':
        return 'If you have an Acquia Network subscription, connect now. Otherwise, you can turn this message off by disabling the Acquia Network modules.';
      case 'enter-email':
        return 'Enter the email address you use to login to the Acquia Network';
      case 'enter-password':
        return 'Enter your Acquia Network password';
      case 'account-not-found':
        return 'Account not found';
      case 'id-key':
        return 'Enter your identifer and key from your subscriptions overview or log in to connect your site to the Acquia Network.';
      case 'enter-key':
        return 'Network key';
      case 'subscription-not-found':
        return 'Error: Subscription not found (1800)';
      case 'saved':
        return 'The Acquia configuration options have been saved.';
      case 'subscription':
        return 'Subscription: ' . ACQTEST_ID; // Assumes subscription name is same as id.
      case 'migrate':
        return 'Transfer a fully-functional copy of your site to Acquia Cloud.';
    }
  }

  public function testAcquiaAgentGetConnected() {
    // Check for call to get connected.
    $this->drupalGet('admin');
    $this->assertText($this->acquiaAgentStrings('30-day'), 'The explanation of services text exists');
    $this->assertLinkByHref($this->cloud_services_url, 0, 'Link to Acquia.com Cloud Services exists');
    $this->assertText($this->acquiaAgentStrings('get-connected'), 'The call-to-action to connect text exists');
    $this->assertLink('connect now', 0, 'The "connect now" link exists');
    // Check connection setup page.
    $this->drupalGet($this->setup_path);
    $this->assertText($this->acquiaAgentStrings('enter-email'), 'The email address field label exists');
    $this->assertText($this->acquiaAgentStrings('enter-password'), 'The password field label exists');
    $this->assertLinkByHref($this->trial_url, 0, 'Link to Acquia.com trial signup exists');
    // Check errors on automatic setup page.
    $edit_fields = array(
      'email' => $this->randomName(),
      'pass' => $this->randomName(),
    );
    $submit_button = 'Next';
    $this->drupalPost($this->setup_path, $edit_fields, $submit_button);
    $this->assertText($this->acquiaAgentStrings('account-not-found'), 'Account not found for random automatic setup attempt');
    // Check manual connection.
    $this->drupalGet($this->credentials_path);
    $this->assertText($this->acquiaAgentStrings('id-key'), 'The network key and id description exists');
    $this->assertText($this->acquiaAgentStrings('enter-key'), 'The network key field label exists');
    $this->assertLinkByHref($this->trial_url, 0, 'Link to Acquia.com trial signup exists');
    // Check errors on connection page.
    $edit_fields = array(
      'acquia_identifier' => $this->randomName(),
      'acquia_key' => $this->randomName(),
    );
    $submit_button = 'Connect';
    $this->drupalPost($this->credentials_path, $edit_fields, $submit_button);
    $this->assertText($this->acquiaAgentStrings('subscription-not-found'), 'Subscription not found for random credentials');
    // Connect site on key and id.
    $edit_fields = array(
      'acquia_identifier' => ACQTEST_ID,
      'acquia_key' => ACQTEST_KEY,
    );
    $submit_button = 'Connect';
    $this->drupalPost($this->credentials_path, $edit_fields, $submit_button);
    $this->drupalGet($this->settings_path);
    $this->assertText($this->acquiaAgentStrings('subscription'), 'Subscription connected with key and identifier');
    $this->assertLinkByHref($this->setup_path, 0, 'Link to change subscription exists');
    $this->assertLinkByHref($this->help_path, 0, 'Link to help page exists');
    $this->assertText($this->acquiaAgentStrings('migrate'), 'Acquia Cloud Migrate description exists');
    // Connect via automatic setup.
    variable_del('acquia_identifier');
    variable_del('acquia_key');
    $edit_fields = array(
      'email' => ACQTEST_EMAIL,
      'pass' => ACQTEST_PASS,
    );
    $submit_button = 'Next';
    $this->drupalPost($this->setup_path, $edit_fields, $submit_button);
    $this->drupalGet($this->setup_path);
    $this->drupalGet($this->settings_path);
    $this->assertText($this->acquiaAgentStrings('subscription'), 'Subscription connected with credentials');
    $edit_fields = array(
      'acquia_dynamic_banner' => TRUE,
    );
    $submit_button = 'Save settings';
    $this->drupalPost($this->settings_path, $edit_fields, $submit_button);
    $this->assertFieldChecked('edit-acquia-dynamic-banner', '"Receive updates from Acquia Network" option stays saved');
  }
}

class AquiaAgentUnitTestCase extends DrupalUnitTestCase {
  public static function getInfo() {
    // Note: getInfo() strings should not be translated.
    return array(
      'name' => 'Acquia Agent unit tests',
      'description' => 'Test Acquia Agent methods.',
      'group' => 'Acquia',
    );
  }

  /**
   * Overrides DrupalUnitTestCase::setUp().
   *
   * Includes the required files in the Acquia Agent module.
   */
  public function setUp() {
    parent::setUp();
    require_once dirname(dirname(__FILE__)) . '/acquia_agent.module';
  }

  public function testAuthenticators() {
    $identifier = $this->randomName();
    $key = $this->randomName();
    $required_keys = array('time', 'nonce', 'hash');
    // Test _acquia_agent_authenticator().
    $result = _acquia_agent_authenticator(array(), $identifier, $key);
    $valid = is_array($result);
    $this->assertTrue($valid, '_acquia_agent_authenticator returns an array');
    if ($valid) {
      foreach ($required_keys as $key) {
        if (!array_key_exists($key, $result)) {
          $valid = FALSE;
          break;
        }
      }
      $this->assertTrue($valid, 'Array has expected keys');
    }
    // Test _acquia_agent_create_authenticator().
    $result = _acquia_agent_create_authenticator(array(), $identifier);
    $valid = is_array($result);
    $this->assertTrue($valid, '_acquia_agent_create_authenticator returns an array');
    if ($valid) {
      foreach ($required_keys as $key) {
        if (!array_key_exists($key, $result)) {
          $valid = FALSE;
          break;
        }
      }
      $this->assertTrue($valid, 'Array has expected keys');
    }
  }
}